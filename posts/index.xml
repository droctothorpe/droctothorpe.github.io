<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on a code to joy</title>
        <link>/posts/</link>
        <description>Recent content in Posts on a code to joy</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 26 Jul 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>ELI5: Kubernetes Operators</title>
            <link>/posts/2020/07/eli5-kubernetes-operators/</link>
            <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/07/eli5-kubernetes-operators/</guid>
            <description>Introduction I&amp;rsquo;ve been thinking about starting an ELI5 (Explain It Like I&amp;rsquo;m Five) Computer Science blog for a while now. I enjoy simplifying obscure, abstract concepts and making them intuitive and accessible. A wise friend once told me that complexity is easy; simplicity is hard. I hope this post succeeds in that goal.
If not, I can always stick to my day job.
The Kubernetes Restaurant You (a user) are seated at a restaurant (Kubernetes).</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve been thinking about starting an ELI5 (Explain It Like I&rsquo;m Five) Computer Science blog for a while now. I enjoy simplifying obscure, abstract concepts and making them intuitive and accessible. A wise friend once told me that complexity is easy; simplicity is hard. I hope this post succeeds in that goal.</p>
<p>If not, I can always stick to my day job.</p>
<h2 id="the-kubernetes-restaurant">The Kubernetes Restaurant</h2>
<p>You (a user) are seated at a restaurant (<a href="https://kubernetes.io/">Kubernetes</a>). You&rsquo;re given a menu and, after an appropriate length of time, a charming waiter (the <a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/">Kubernetes API</a>), takes your order, which consists of several items (<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/">Kubernetes objects</a>).</p>
<p>The waiter adds your order to the order list (<a href="https://kubernetes.io/docs/concepts/overview/components/#etcd">etcd</a>, the Kubernetes data store).</p>
<p>A grizzled, curmudgeonly cook (a <a href="https://kubernetes.io/docs/concepts/architecture/controller/">Kubernetes controller</a>) retrieves your order from the order list and prepares the requested dishes.</p>
<p>Note, you don&rsquo;t actually have to know how the food is prepared. All you need to do is state your desire <strong>declaratively</strong>, and the cook (controller) gives you what you want by walking through a sequence of <strong>imperative</strong> steps. That&rsquo;s part of the beauty of Kubernetes. Many other solutions are the equivalent of cooking at home. If you want to focus on eating, not cooking, it can be helpful to offload that imperative overhead.</p>
<h2 id="operators">Operators</h2>
<p>Let&rsquo;s say you&rsquo;re itching for a specific dish that&rsquo;s not on the menu. Luckily, the owner of the restaurant is open to suggestions from customers (Kubernetes is <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/extend-cluster/">awesomely extensible</a>). You can ask the owner to add an item to the menu (a <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">Custom Resource Definition</a>, which creates both a new object type and a new API endpoint). The owner generously agrees.</p>
<p>Now anyone can place an order for the new item (a <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/">Custom Resource</a>). The trouble is, the existing cooks (vanilla controllers) don&rsquo;t know how to prepare the new dish, so a new cook (a custom controller) is hired (deployed). When requests come in for the new order, the new cook responds to them by executing a sequence of steps and, in most cases, delegating some work to the original cooks (vanilla controllers).</p>
<p>That&rsquo;s all an <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">Operator</a> is: a new item on the menu and a new cook who knows how to prepare it, or in other words, the combination of a Custom Resource Definition and a custom controller.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m not feeling very optimistic, but I hope you enjoyed this post. Maybe I&rsquo;ll add some terrible illustrations down the line. If nothing else, it beats how CRDs are described as horrific Dr.Moreau-esque chimeras in <a href="https://www.cncf.io/phippy-goes-to-the-zoo-book/">Phippy Goes To The Zoo</a>.</p>
<blockquote>
<p>Zee halted abruptly. In the distance, a black-railed fence arose. The arches above the pen were marked C-R-D. Between the bars, Zee could make out some peculiar critters. A giraffe with a hippopotamus head. A snake with raccoon ears. A lion with a beaver’s tail. A unicorn with no horn. Zee wasn’t sure she liked the looks of that place.</p>
</blockquote>
<p><img src="https://www.cncf.io/wp-content/uploads/2018/12/phippy-goes-to-the-zoo-18-1.png" alt=""></p>
<blockquote>
<p>“Oh,” said Phippy, a look of concern on her face, “Uh… look! It’s lunch time! We’d better head home.”</p>
</blockquote>
<p><img src="/img/phippy.png" alt=""></p>
<p>Calm the f#*! down Phipphy.</p>
]]></content>
        </item>
        
        <item>
            <title>Leveled logs with Cobra and Logrus</title>
            <link>/posts/2020/07/leveled-logs-with-cobra-and-logrus/</link>
            <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/07/leveled-logs-with-cobra-and-logrus/</guid>
            <description>I recently wrote a CLI using Cobra, a widely adopted CLI framework for Golang that&amp;rsquo;s used in Kubectl, Docker, Terraform, Hugo, and other industry-standard CLIs.
I wanted to use Logrus, a highly regarded structured logging framework for Go. I wanted informative, colorized, leveled logs, but I also wanted to be able to log simple, user-facing output without all of the bells and whistles. I was surprised at the lack of documentation around this simple goal.</description>
            <content type="html"><![CDATA[<p>I recently wrote a CLI using <a href="https://github.com/spf13/cobra">Cobra</a>, a widely adopted CLI framework for Golang that&rsquo;s used in Kubectl, Docker, Terraform, Hugo, and other industry-standard CLIs.</p>
<p>I wanted to use <a href="https://github.com/sirupsen/logrus">Logrus</a>, a highly regarded structured logging framework for Go. I wanted informative, colorized, leveled logs, but I also wanted to be able to log simple, user-facing output without all of the bells and whistles. I was surprised at the lack of documentation around this simple goal.</p>
<p>Here&rsquo;s one way to solve this problem.</p>
<p>Create a file called <code>logging.go</code> in your <code>cmd</code> package:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">cmd</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;fmt&#34;</span>
	<span style="color:#a6e22e">log</span> <span style="color:#e6db74">&#34;github.com/sirupsen/logrus&#34;</span>
	<span style="color:#e6db74">&#34;github.com/spf13/cobra&#34;</span>
)

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">debug</span> <span style="color:#66d9ef">bool</span>

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">PlainFormatter</span> <span style="color:#66d9ef">struct</span> {
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">f</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">PlainFormatter</span>) <span style="color:#a6e22e">Format</span>(<span style="color:#a6e22e">entry</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Entry</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
	<span style="color:#66d9ef">return</span> []byte(<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;%s\n&#34;</span>, <span style="color:#a6e22e">entry</span>.<span style="color:#a6e22e">Message</span>)), <span style="color:#66d9ef">nil</span>
}
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">toggleDebug</span>(<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cobra</span>.<span style="color:#a6e22e">Command</span>, <span style="color:#a6e22e">args</span> []<span style="color:#66d9ef">string</span>) {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">debug</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>(<span style="color:#e6db74">&#34;Debug logs enabled&#34;</span>)
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetLevel</span>(<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">DebugLevel</span>)
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetFormatter</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">TextFormatter</span>{})
	} <span style="color:#66d9ef">else</span> {
		<span style="color:#a6e22e">plainFormatter</span> <span style="color:#f92672">:=</span> new(<span style="color:#a6e22e">PlainFormatter</span>)
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">SetFormatter</span>(<span style="color:#a6e22e">plainFormatter</span>)
	}
}
</code></pre></div><p>Add a <code>PreRun</code> to each of your Cobra commands:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">addCmd</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cobra</span>.<span style="color:#a6e22e">Command</span>{
    <span style="color:#f92672">...</span>
	<span style="color:#a6e22e">PreRun</span>: <span style="color:#a6e22e">toggleDebug</span>, <span style="color:#75715e">// This. 
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Run</span>: <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cobra</span>.<span style="color:#a6e22e">Command</span>, <span style="color:#a6e22e">args</span> []<span style="color:#66d9ef">string</span>) {
    <span style="color:#75715e">// Subcommand logic goes here.
</span><span style="color:#75715e"></span>    }
}
</code></pre></div><p>Add a global persistent flag to <code>root.go</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">init</span>() {
    <span style="color:#f92672">...</span>
	<span style="color:#a6e22e">rootCmd</span>.<span style="color:#a6e22e">PersistentFlags</span>().<span style="color:#a6e22e">BoolVarP</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">debug</span>, <span style="color:#e6db74">&#34;debug&#34;</span>, <span style="color:#e6db74">&#34;d&#34;</span>, <span style="color:#66d9ef">false</span>, <span style="color:#e6db74">&#34;verbose logging&#34;</span>)
}
</code></pre></div><p>It&rsquo;s as simple as that. Now you can reap the benefits of flag-toggled leveled logs. Use the following invocations anywhere in your code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-golang" data-lang="golang"><span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Info</span>()
<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Debug</span>()
<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Warning</span>()
<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Error</span>()
<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>()
</code></pre></div><p>Debug logs are suppressed by default. You can pass the <code>--debug</code> or <code>-d</code> flag to any command to print more verbose, colorized debug logs, which are super helpful when troubleshooting.</p>
<p>I hope you found this helpful.</p>
]]></content>
        </item>
        
        <item>
            <title>Explain in the membrane</title>
            <link>/posts/2019/07/explain-in-the-membrane/</link>
            <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/07/explain-in-the-membrane/</guid>
            <description>Explainshell I stumbled into this brilliant tidbit in a post by LostCharacter on ycombinator.
Here&amp;rsquo;s the actual code:
explain () { if [ &amp;#34;$#&amp;#34; -eq 0 ] then while read -p &amp;#34;Command: &amp;#34; cmd do curl -Gs &amp;#34;https://www.mankier.com/api/explain/?cols=&amp;#34;$(tput cols) --data-urlencode &amp;#34;q=$cmd&amp;#34; done echo &amp;#34;Bye!&amp;#34; elif [ &amp;#34;$#&amp;#34; -eq 1 ] then curl -Gs &amp;#34;https://www.mankier.com/api/explain/?cols=&amp;#34;$(tput cols) --data-urlencode &amp;#34;q=$1&amp;#34; else echo &amp;#34;Usage&amp;#34; echo &amp;#34;explain interactive mode.&amp;#34; echo &amp;#34;explain &amp;#39;cmd -o | ...&amp;#39; one quoted command to explain it.</description>
            <content type="html"><![CDATA[<h2 id="explainshell">Explainshell</h2>
<p>I stumbled into this brilliant tidbit in a <a href="https://news.ycombinator.com/item?id=13994923">post</a> by LostCharacter on ycombinator.</p>
<p>Here&rsquo;s the actual code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">explain <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$#<span style="color:#e6db74">&#34;</span> -eq <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>
    <span style="color:#66d9ef">then</span>
        <span style="color:#66d9ef">while</span> read -p <span style="color:#e6db74">&#34;Command: &#34;</span> cmd
        <span style="color:#66d9ef">do</span>
            curl -Gs <span style="color:#e6db74">&#34;https://www.mankier.com/api/explain/?cols=&#34;</span><span style="color:#66d9ef">$(</span>tput cols<span style="color:#66d9ef">)</span> --data-urlencode <span style="color:#e6db74">&#34;q=</span>$cmd<span style="color:#e6db74">&#34;</span>
        <span style="color:#66d9ef">done</span>
        echo <span style="color:#e6db74">&#34;Bye!&#34;</span>
    <span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$#<span style="color:#e6db74">&#34;</span> -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>
    <span style="color:#66d9ef">then</span>
        curl -Gs <span style="color:#e6db74">&#34;https://www.mankier.com/api/explain/?cols=&#34;</span><span style="color:#66d9ef">$(</span>tput cols<span style="color:#66d9ef">)</span> --data-urlencode <span style="color:#e6db74">&#34;q=</span>$1<span style="color:#e6db74">&#34;</span>
    <span style="color:#66d9ef">else</span>
        echo <span style="color:#e6db74">&#34;Usage&#34;</span>
        echo <span style="color:#e6db74">&#34;explain                  interactive mode.&#34;</span>
        echo <span style="color:#e6db74">&#34;explain &#39;cmd -o | ...&#39;   one quoted command to explain it.&#34;</span>
    <span style="color:#66d9ef">fi</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>It interacts with <a href="https://www.mankier.com/">www.mankier.com</a> (an awesome website in its own right) to explain what a specified bash command does, and most compellingly, what the specified flags do.</p>
<p><a href="https://www.explainshell.com/">Explainshell</a> offers a similar service, but staying in the terminal ecosystem is preferable because it alleviates the need to switch contexts and justifies a degree of technical elitism. Browsers are for newbs, after all. You&rsquo;re reading this via Lynx I assume.</p>
<p>Here&rsquo;s an example of usage and corresponding output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯ explain <span style="color:#e6db74">&#39;rsync -a&#39;</span>
rsync<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>
  a fast, versatile, remote <span style="color:#f92672">(</span>and local<span style="color:#f92672">)</span> file-copying tool
-a <span style="color:#f92672">(</span>-A, --ARCHIVE<span style="color:#f92672">)</span>
    This is equivalent to -RLPTGOD. It is a quick way of saying you want recursion and want to preserve almost everything <span style="color:#f92672">(</span>with -H being a
    notable omission<span style="color:#f92672">)</span>. The only exception to the above equivalence is when --FILES-FROM is specified, in which <span style="color:#66d9ef">case</span> -R is not implied.
    
    Note that -A DOES NOT PRESERVE HARDLINKS, because finding multiply-linked files is expensive. You must separately specify -H.
                                                                                                             https://www.mankier.com/1/rsync
</code></pre></div><p>Just add the function to your respective shell profile, and revel in the glory of bashlightenment.</p>
<h2 id="cheatsh">Cheat.sh</h2>
<p><a href="https://cheat.sh/">Cheat.sh</a> is very useful. The command line interface can be installed in <a href="https://github.com/chubin/cheat.sh#installation">two steps</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl https://cht.sh/:cht.sh | sudo tee /usr/local/bin/cht.sh
chmod +x /usr/local/bin/cht.sh
</code></pre></div><p>Once installed, just type <code>cht.sh &lt;any question&gt;</code>. It runs a stack overflow search and returns the response with the highest upvotes, circumventing the need to context switch to your browser.</p>
<p>Here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯ cht.sh python random int
<span style="color:#75715e">#  python - Generate random integers between 0 and 9</span>
#
<span style="color:#75715e">#  Try:</span>
from random import randint
print<span style="color:#f92672">(</span>randint<span style="color:#f92672">(</span>0, 9<span style="color:#f92672">))</span>
<span style="color:#75715e">#  More info:</span>
<span style="color:#75715e">#  https://docs.python.org/3/library/random.htmlrandom.randint</span>
#
<span style="color:#75715e">#  [kovshenin] [so/q/3996904] [cc by-sa 3.0]</span>
</code></pre></div><h2 id="story-time">Story Time</h2>
<p>Since we&rsquo;re (sort of) on the subject, I heard a funny story from a friend recently.</p>
<p>He complimented a man wearing this t-shirt:
<img src="/img/shell_script_tshirt.jpg" alt=""></p>
<p>&ldquo;Do you know who I am?&rdquo; Asked the man.</p>
<p>&ldquo;No,&rdquo; replied my friend.</p>
<p>&ldquo;I&rsquo;m <a href="https://en.wikipedia.org/wiki/David_Korn_(computer_scientist)">David Korn</a>. I invented the Korn shell. When I say I can replace you with a shell script, I mean it.&rdquo;</p>
]]></content>
        </item>
        
    </channel>
</rss>
